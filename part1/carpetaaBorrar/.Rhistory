ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
summary(ECM.D)
summary(ECM.P)
summary(ECM.E)
plot(y.real,predict(ajus.E))
errores<-c(mean(ECM.D),mean(ECM.P),mean(ECM.E))
barplot(errores,names.arg = c("D","P","E"),ylab="ECM",col=2:4)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
x1bajo<-as.factor(x1<median(x1))
x2bajo<-as.factor(x2<median(x2))
print(x1bajo)
print(x1bajo)
y <- x %*% betas + rnorm(n)*2
y.real<-x %*% betas
# Description
pred.D<-mean(y)
ECM.D[i]<-(mean((y.real-pred.D)^2))
# Prediccion
ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
print(x1)
print(x2)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
print(x1)
print(x2)
x1bajo<-as.factor(x1<median(x1))
x2bajo<-as.factor(x2<median(x2))
y <- x %*% betas + rnorm(n)*2
y.real<-x %*% betas
# Description
pred.D<-mean(y)
ECM.D[i]<-(mean((y.real-pred.D)^2))
# Prediccion
ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
print(x)
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
x1bajo<-as.factor(x1<median(x1))
x2bajo<-as.factor(x2<median(x2))
y <- x %*% betas + rnorm(n)*2
y.real<-x %*% betas
# Description
pred.D<-mean(y)
ECM.D[i]<-(mean((y.real-pred.D)^2))
# Prediccion
ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
print(x)
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
x1bajo<-as.factor(x1<median(x1))
x2bajo<-as.factor(x2<median(x2))
y <- x %*% betas + rnorm(n)*2
y.real<-x %*% betas
# Description
pred.D<-mean(y)
ECM.D[i]<-(mean((y.real-pred.D)^2))
# Prediccion
ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
summary(ECM.D)
summary(ECM.P)
summary(ECM.E)
plot(y.real,predict(ajus.E))
errores<-c(mean(ECM.D),mean(ECM.P),mean(ECM.E))
barplot(errores,names.arg = c("D","P","E"),ylab="ECM",col=2:4)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
print(x)
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
x1bajo<-as.factor(x1<median(x1))
x2bajo<-as.factor(x2<median(x2))
y <- x %*% betas + rnorm(n)*2
y.real<-x %*% betas
# Description
pred.D<-mean(y)
ECM.D[i]<-(mean((y.real-pred.D)^2))
# Prediccion
ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
summary(ECM.D)
summary(ECM.P)
summary(ECM.E)
plot(y.real,predict(ajus.E))
errores<-c(mean(ECM.D),mean(ECM.P),mean(ECM.E))
barplot(errores,names.arg = c("D","P","E"),ylab="ECM",col=2:4)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
print(x)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
print(ruido)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
print(ruido)
x<-lax+ruido
print(x)
y <- x %*% betas + rnorm(n)*2
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
# OLS
ajus.ols<-lm.fit(x,y)
coef(ajus.ols)
#####################################################3
N<-10000 # number of simulations
n<-50 # number of observations
p<-2 #number of variables
grade<-10
ECM.D<-rep(NA,N) # vector to store ols estimate
ECM.P<-rep(NA,N) # vector to store ols estimate
ECM.E<-rep(NA,N) # vector to store ols estimate
for (i in 1:N)
{
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
x<-lax+ruido
x1<-x[,1]
x2<-x[,2]
y <- x %*% betas + rnorm(n)*2
y.real<-x %*% betas
# Description
pred.D<-mean(y)
ECM.D[i]<-(mean((y.real-pred.D)^2))
# Prediccion
ajus.P<-lm(y~x2)
ECM.P[i]<-(mean((y.real-predict(ajus.P))^2))
# Explicacion
ajus.E<-lm(y~x1+x2)
ECM.E[i]<-(mean((y.real-predict(ajus.E))^2))
}
summary(ECM.D)
summary(ECM.P)
summary(ECM.E)
plot(y.real,predict(ajus.E))
errores<-c(mean(ECM.D),mean(ECM.P),mean(ECM.E))
barplot(errores,names.arg = c("D","P","E"),ylab="ECM",col=2:4)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
print(ruido)
x<-lax+ruido
print(x)
y <- x %*% betas + rnorm(n)*2
print(y)
################################
# El Eje Descripcion-Prediccion_Explicacion (DPE)
###############################
library(GGally)
library(manipulate)
# data simulation
# many features highly correlated
set.seed(1)
n<-50 # number of observations
p<-2 #number of variables
grade<-10 #20
betas <- c(1,3)
lax<-runif(n)
ruido <- matrix(rnorm(n*p)/grade, nrow = n)
print(ruido)
x<-lax+ruido
print(x)
y <- x %*% betas + rnorm(n)*2
print(y)
mues<-data.frame(cbind(x,y))
dimnames(mues)[[2]]<-c('x1','x2','y')
ggpairs(mues)
qplot(x[,1],y)
qplot(x[,2],y)
install.packages("genalg")
install.packages("arules")
install.packages("arulesViz")
install.packages("tidyverse")
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
install.packages(arules)
install.packages("arules")
library(arules)
library(arulesViz)
install.packages("arulesViz")
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
install.packages("arulesViz")
install.packages("arulesViz")
library(arules)
library(arulesViz)
library(arules)
library(arulesViz)
install.packages("curl")
install.packages("libcurl4-openssl-dev")
library(arules)
library(arulesViz)
library(tidyVerse)
install.packages("tidyverse")
install.packages("libxml2-dev ")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("libxml-2.0")
install.packages("tidyverse")
library("tidyverse")
library(arules)
library(arulesViz)
library(tidyverse)
datos<-read.transactions('/home/andresfaral/Documents/Ciencia de Datos con R/Reglas de Asociacion/groceries.csv', sep=',')
datos<-read.transactions('/home/andresfaral/Documents/Ciencia de Datos con R/Reglas de Asociacion/groceries.csv', sep=',')
